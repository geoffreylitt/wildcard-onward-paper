
@misc{2019,
  title = {End-User Programming},
  year = {2019},
  month = mar,
  abstract = {A vision for empowered computing that reaches back forty years. Our research lab examines why it has been so hard to achieve.},
  file = {/Users/geoffreylitt/Zotero/storage/VN9ZZWVZ/end-user-programming.html},
  howpublished = {https://www.inkandswitch.com/end-user-programming.html},
  journal = {Ink and Switch},
  language = {en-US}
}

@misc{2020a,
  title = {Airtable},
  shorttitle = {Airtable},
  year = {2020},
  abstract = {Airtable works like a spreadsheet but gives you the power of a database to organize anything. Sign up for free.},
  file = {/Users/geoffreylitt/Zotero/storage/8UKHXPNG/airtable.com.html},
  howpublished = {https://airtable.com},
  journal = {Airtable}
}

@misc{2020b,
  title = {Glide},
  year = {2020},
  abstract = {Glide turns spreadsheets into beautiful, easy-to-use apps, without code. Pick a spreadsheet or start with a template, customize your app, then share it instantly with anyone. Start today for free!},
  file = {/Users/geoffreylitt/Zotero/storage/YRRWLQM8/www.glideapps.com.html},
  howpublished = {https://www.glideapps.com/},
  language = {en}
}

@article{ainsworth1999,
  title = {The Functions of Multiple Representations},
  author = {Ainsworth, Shaaron},
  year = {1999},
  month = sep,
  volume = {33},
  pages = {131--152},
  issn = {03601315},
  doi = {10.1016/S0360-1315(99)00029-9},
  abstract = {Multiple representations and multi-media can support learning in many dierent ways. In this paper, it is claimed that by identifying the functions that they can serve, many of the con\textasciimacron icting \textregistered ndings arising out of the existing evaluations of multi-representational learning environments can be explained. This will lead to more systematic design principles. To this end, this paper describes a functional taxonomy of MERs. This taxonomy is used to ask how translation across representations should be supported to maximise learning outcomes and what information should be gathered from empirical evaluation in order to determine the eectiveness of multi-representational learning environments. \# 2000 Elsevier Science Ltd. All rights reserved.},
  file = {/Users/geoffreylitt/Zotero/storage/HF2GC8JY/Ainsworth - 1999 - The functions of multiple representations.pdf},
  journal = {Computers \& Education},
  language = {en},
  number = {2-3}
}

@inproceedings{alrashed2020,
  title = {{{ScrAPIr}}: {{Making Web Data APIs Accessible}} to {{End Users}}},
  shorttitle = {{{ScrAPIr}}},
  booktitle = {Proceedings of the 2020 {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Alrashed, Tarfah and Almahmoud, Jumana and Zhang, Amy X. and Karger, David R.},
  year = {2020},
  month = apr,
  pages = {1--12},
  publisher = {{Association for Computing Machinery}},
  address = {{Honolulu, HI, USA}},
  doi = {10.1145/3313831.3376691},
  abstract = {Users have long struggled to extract and repurpose data from websites by laboriously copying or scraping content from web pages. An alternative is to write scripts that pull data through APIs. This provides a cleaner way to access data than scraping; however, APIs are effortful for programmers and nigh-impossible for non-programmers to use. In this work, we empower users to access APIs without programming. We evolve a schema for declaratively specifying how to interact with a data API. We then develop ScrAPIr: a standard query GUI that enables users to fetch data through any API for which a specification exists, and a second GUI that lets users author and share the specification for a given API. From a lab evaluation, we find that even non-programmers can access APIs using ScrAPIr, while programmers can access APIs 3.8 times faster on average using ScrAPIr than using programming.},
  file = {/Users/geoffreylitt/Zotero/storage/AXSUQGM7/Alrashed et al. - 2020 - ScrAPIr Making Web Data APIs Accessible to End Us.pdf},
  isbn = {978-1-4503-6708-0},
  keywords = {api description language,web apis,web scraping},
  series = {{{CHI}} '20}
}

@article{anupam2000,
  title = {Automating {{Web}} Navigation with the {{WebVCR}}},
  author = {Anupam, Vinod and Freire, Juliana and Kumar, Bharat and Lieuwen, Daniel},
  year = {2000},
  month = jun,
  volume = {33},
  pages = {503--517},
  issn = {1389-1286},
  doi = {10.1016/S1389-1286(00)00073-6},
  abstract = {Recent developments in Web technology such as the inclusion of scripting languages, frames, and the growth of dynamic content, have made the process of retrieving Web content more complicated, and sometimes tedious. For example, Web browsers do not provide a method for a user to bookmark a frame-based Web site once the user navigates within the initial frameset. Also, some sites, such as travel sites and online classifieds, require users to go through a sequence of steps and fill out a sequence of forms in order to access their data. Using the bookmark facilities implemented in all popular browsers, often it is not possible to create a shortcut to access such data, and these steps must be manually repeated every time the data is needed. However, hard-to-reach pages are often the best candidates for a shortcut, because significantly more effort is required to reach them than to reach a standard page with a well-defined URL. The WebVCR system addresses this problem by letting users record and replay a series of browsing steps in smart bookmarks \textemdash{} shortcuts to Web content that require multiple steps to be retrieved. It provides a VCR-style interface to transparently record and replay users' actions. Creating and updating smart bookmarks is a simple process involving only the usual browsing actions and requiring no programming by the user. In addition to saving users time by providing shortcuts to hard-to-reach Web content, smart bookmarks can be used as building blocks for many interesting Web applications and new e-commerce services. In this paper, we describe the WebVCR and the techniques it uses to record and replay smart bookmarks, as well as our experiences in building the system. We also discuss some applications that are simplified/enabled by smart bookmarks.},
  file = {/Users/geoffreylitt/Zotero/storage/RTEBNIVU/Anupam et al. - 2000 - Automating Web navigation with the WebVCR.pdf;/Users/geoffreylitt/Zotero/storage/DSTLQZGB/S1389128600000736.html},
  journal = {Computer Networks},
  keywords = {Affiliate programs,Bookmarks,Dynamic content,Electronic commerce,Notification,Personalization,Smart bookmarks,Tutorials,Web clipping,Wrappers},
  language = {en},
  number = {1}
}

@inproceedings{bakke2016,
  title = {Expressive {{Query Construction}} through {{Direct Manipulation}} of {{Nested Relational Results}}},
  booktitle = {Proceedings of the 2016 {{International Conference}} on {{Management}} of {{Data}} - {{SIGMOD}} '16},
  author = {Bakke, Eirik and Karger, David R.},
  year = {2016},
  pages = {1377--1392},
  publisher = {{ACM Press}},
  address = {{San Francisco, California, USA}},
  doi = {10.1145/2882903.2915210},
  abstract = {Despite extensive research on visual query systems, the standard way to interact with relational databases remains to be through SQL queries and tailored form interfaces. We consider three requirements to be essential to a successful alternative: (1) query specification through direct manipulation of results, (2) the ability to view and modify any part of the current query without departing from the direct manipulation interface, and (3) SQL-like expressiveness. This paper presents the first visual query system to meet all three requirements in a single design. By directly manipulating nested relational results, and using spreadsheet idioms such as formulas and filters, the user can express a relationally complete set of query operators plus calculation, aggregation, outer joins, sorting, and nesting, while always remaining able to track and modify the state of the complete query. Our prototype gives the user an experience of responsive, incremental query building while pushing all actual query processing to the database layer. We evaluate our system with formative and controlled user studies on 28 spreadsheet users; the controlled study shows our system significantly outperforming Microsoft Access on the System Usability Scale.},
  file = {/Users/geoffreylitt/Zotero/storage/UAXRC2LC/Bakke and Karger - 2016 - Expressive Query Construction through Direct Manip.pdf},
  isbn = {978-1-4503-3531-7},
  language = {en}
}

@inproceedings{beaudouin-lafon2000,
  title = {Reification, {{Polymorphism}} and {{Reuse}}: {{Three Principles}} for {{Designing Visual Interfaces}}},
  shorttitle = {Reification, {{Polymorphism}} and {{Reuse}}},
  booktitle = {Proceedings of the {{Working Conference}} on {{Advanced Visual Interfaces}}},
  author = {{Beaudouin-Lafon}, Michel and Mackay, Wendy E.},
  year = {2000},
  pages = {102--109},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/345513.345267},
  abstract = {This paper presents three design principles to support the development of large-scale applications and take advantage of recent research in new interaction techniques: Reification turns concepts into first class objects, polymorphism permits commands to be applied to objects of different types, and reuse makes both user input and system output accessible for later use. We show that the power of these principles lies in their combination. Reification creates new objects that can be acted upon by a small set of polymorphic commands, creating more opportunities for reuse. The result is a simpler yet more powerful interface.
To validate these principles, we describe their application in the redesign of a complex interface for editing and simulating Coloured Petri Nets. The cpn2000 interface integrates floating palettes, toolglasses and marking menus in a consistent manner with a new metaphor for managing the workspace. It challenges traditional ideas about user interfaces, getting rid of pull-down menus, scrollbars, and even selection, while providing the same or greater functionality. Preliminary tests with users show that they find the new system both easier to use and more efficient.},
  file = {/Users/geoffreylitt/Zotero/storage/ZUTWDQ9X/Beaudouin-Lafon and Mackay - 2000 - Reification, Polymorphism and Reuse Three Princip.pdf},
  isbn = {978-1-58113-252-6},
  keywords = {design principles,direct manipulation,instrumental interaction,interaction model,polymorphism,reification,reuse},
  series = {{{AVI}} '00}
}

@inproceedings{benson2014,
  title = {Spreadsheet Driven Web Applications},
  booktitle = {Proceedings of the 27th Annual {{ACM}} Symposium on {{User}} Interface Software and Technology - {{UIST}} '14},
  author = {Benson, Edward and Zhang, Amy X. and Karger, David R.},
  year = {2014},
  pages = {97--106},
  publisher = {{ACM Press}},
  address = {{Honolulu, Hawaii, USA}},
  doi = {10.1145/2642918.2647387},
  abstract = {Creating and publishing read-write-compute web applications requires programming skills beyond what most end users possess. But many end users know how to make spreadsheets that act as simple information management applications, often with computation. We present a system for creating basic web applications using such spreadsheets in place of a server and using HTML to describe the client UI. Authors connect the two by placing spreadsheet references inside HTML attributes. Data computation is provided by spreadsheet formulas. The result is a reactive read-write-compute web page without a single line of Javascript code. Nearly all of the fifteen HTML novices we studied were able to connect HTML to spreadsheets using our method with minimal instruction. We draw conclusions from their experience and discuss future extensions to this programming model.},
  file = {/Users/geoffreylitt/Zotero/storage/GGLIRAZC/Benson et al. - 2014 - Spreadsheet driven web applications.pdf},
  isbn = {978-1-4503-3069-5},
  language = {en}
}

@misc{berners-lee2018,
  title = {One {{Small Step}} for the {{Web}}\ldots},
  author = {{Berners-Lee}, Tim},
  year = {2018},
  month = sep,
  abstract = {I've always believed the web is for everyone. That's why I and others fight fiercely to protect it. The changes we've managed to bring have\ldots},
  file = {/Users/geoffreylitt/Zotero/storage/MSSQR3BL/one-small-step-for-the-web-87f92217d085.html},
  howpublished = {https://medium.com/@timberners\_lee/one-small-step-for-the-web-87f92217d085},
  journal = {Medium},
  language = {en}
}

@misc{berners-lee2019,
  title = {One {{Small Step}} for the {{Web}}\ldots},
  author = {{Berners-Lee}, Tim},
  year = {2019},
  month = jan,
  abstract = {I've always believed the web is for everyone. That's why I and others fight fiercely to protect it. The changes we've managed to bring have\ldots},
  file = {/Users/geoffreylitt/Zotero/storage/DMNQSFG7/one-small-step-for-the-web-87f92217d085.html},
  howpublished = {https://medium.com/@timberners\_lee/one-small-step-for-the-web-87f92217d085},
  journal = {Medium},
  language = {en}
}

@inproceedings{bolin2005,
  title = {Automation and Customization of Rendered Web Pages},
  booktitle = {Proceedings of the 18th Annual {{ACM}} Symposium on {{User}} Interface Software and Technology  - {{UIST}} '05},
  author = {Bolin, Michael and Webber, Matthew and Rha, Philip and Wilson, Tom and Miller, Robert C.},
  year = {2005},
  pages = {163},
  publisher = {{ACM Press}},
  address = {{Seattle, WA, USA}},
  doi = {10.1145/1095034.1095062},
  abstract = {On the desktop, an application can expect to control its user interface down to the last pixel, but on the World Wide Web, a content provider has no control over how the client will view the page, once delivered to the browser. This creates an opportunity for end-users who want to automate and customize their web experiences, but the growing complexity of web pages and standards prevents most users from realizing this opportunity. We describe Chickenfoot, a programming system embedded in the Firefox web browser, which enables end-users to automate, customize, and integrate web applications without examining their source code. One way Chickenfoot addresses this goal is a novel technique for identifying page components by keyword pattern matching. We motivate this technique by studying how users name web page components, and present a heuristic keyword matching algorithm that identifies the desired component from the user's name.},
  file = {/Users/geoffreylitt/Zotero/storage/JS89G2G2/Bolin et al. - 2005 - Automation and customization of rendered web pages.pdf},
  isbn = {978-1-59593-271-6},
  keywords = {Wildcard},
  language = {en}
}

@inproceedings{chang2014,
  title = {Creating Interactive Web Data Applications with Spreadsheets},
  booktitle = {Proceedings of the 27th Annual {{ACM}} Symposium on {{User}} Interface Software and Technology - {{UIST}} '14},
  author = {Chang, Kerry Shih-Ping and Myers, Brad A.},
  year = {2014},
  pages = {87--96},
  publisher = {{ACM Press}},
  address = {{Honolulu, Hawaii, USA}},
  doi = {10.1145/2642918.2647371},
  abstract = {While more and more data are available through web services, it remains difficult for end-users to create web applications that make use of these data without having to write complex code. We present Gneiss, a live programming environment that extends the spreadsheet metaphor to support creating interactive web applications that dynamically use local and web data from multiple sources. Gneiss closely integrates a spreadsheet editor with a web interface builder to let users demonstrate bindings between properties of web GUI elements and cells in the spreadsheet while working with real web service data. The spreadsheet editor provides two-way connections to web services, to both visualize and retrieve different data based on the user input in the web interface. Gneiss achieves rich interactivity without the need for event-based programming by extending the ``pull model'' of formulas that is familiar to the spreadsheet users. We use a series of examples to demonstrate Gneiss's ability to create a variety of interactive web data applications.},
  file = {/Users/geoffreylitt/Zotero/storage/VKRPDATE/Chang and Myers - 2014 - Creating interactive web data applications with sp.pdf},
  isbn = {978-1-4503-3069-5},
  language = {en}
}

@inproceedings{chasins2018,
  title = {Rousillon: {{Scraping Distributed Hierarchical Web Data}}},
  shorttitle = {Rousillon},
  booktitle = {The 31st {{Annual ACM Symposium}} on {{User Interface Software}} and {{Technology}} - {{UIST}} '18},
  author = {Chasins, Sarah E. and Mueller, Maria and Bodik, Rastislav},
  year = {2018},
  pages = {963--975},
  publisher = {{ACM Press}},
  address = {{Berlin, Germany}},
  doi = {10.1145/3242587.3242661},
  abstract = {Programming by Demonstration (PBD) promises to enable data scientists to collect web data. However, in formative interviews with social scientists, we learned that current PBD tools are insufficient for many real-world web scraping tasks. The missing piece is the capability to collect hierarchicallystructured data from across many different webpages. We present Rousillon, a programming system for writing complex web automation scripts by demonstration. Users demonstrate how to collect the first row of a `universal table' view of a hierarchical dataset to teach Rousillon how to collect all rows. To offer this new demonstration model, we developed novel relation selection and generalization algorithms. In a withinsubject user study on 15 computer scientists, users can write hierarchical web scrapers 8 times more quickly with Rousillon than with traditional programming.},
  file = {/Users/geoffreylitt/Zotero/storage/DJQ79QKU/Chasins et al. - 2018 - Rousillon Scraping Distributed Hierarchical Web D.pdf},
  isbn = {978-1-4503-5948-1},
  language = {en}
}

@incollection{chilton2010,
  title = {Why We Customize the {{Web}}},
  booktitle = {No {{Code Required}}},
  author = {Chilton, Lydia B. and Miller, Robert C. and Little, Greg and Yu, Chen-Hsiang},
  year = {2010},
  pages = {23--35},
  publisher = {{Elsevier}},
  doi = {10.1016/B978-0-12-381541-5.00002-X},
  abstract = {The Web is increasingly an application platform comparable to the desktop, but its openness enables more customizations than were possible on the desktop. This chapter examines the kinds of customization seen on the Web, focusing on the highly extensible Mozilla Firefox Web browser, and compares and contrasts the motivations for Web customization with desktop customization.},
  file = {/Users/geoffreylitt/Zotero/storage/CPDBUMWR/Chilton et al. - 2010 - Why we customize the Web.pdf},
  isbn = {978-0-12-381541-5},
  language = {en}
}

@inproceedings{cook2007,
  title = {{{AppleScript}}},
  booktitle = {Proceedings of the Third {{ACM SIGPLAN}} Conference on {{History}} of Programming Languages  - {{HOPL III}}},
  author = {Cook, William R.},
  year = {2007},
  pages = {1-1-1-21},
  publisher = {{ACM Press}},
  address = {{San Diego, California}},
  doi = {10.1145/1238844.1238845},
  file = {/Users/geoffreylitt/Zotero/storage/4ZFGV2YC/4ZFGV2YC.pdf},
  language = {en}
}

@incollection{cypher2010,
  title = {End User Programming on the {{Web}}},
  booktitle = {No {{Code Required}}},
  author = {Cypher, Allen},
  year = {2010},
  pages = {3--22},
  publisher = {{Elsevier}},
  doi = {10.1016/B978-0-12-381541-5.00001-8},
  abstract = {This introduction explains who end users are and why they want to program. In the past 25 years, there have been two main approaches to enable end users to create their own programs: scripting languages and programming by demonstration. After outlining the challenges that confront these approaches, we shall see how the Web has removed some of the most significant barriers, opening the way for the recent progress that is detailed in this book.},
  file = {/Users/geoffreylitt/Zotero/storage/DS4X22YE/Cypher - 2010 - End user programming on the Web.pdf},
  isbn = {978-0-12-381541-5},
  language = {en}
}

@incollection{cypher2010a,
  title = {Collaborative Scripting for the {{Web}}},
  booktitle = {No {{Code Required}}},
  author = {Cypher, Allen and Drews, Clemens and Haber, Eben and Kandogan, Eser and Lin, James and Lau, Tessa and Leshed, Gilly and Matthews, Tara and Wilcox, Eric},
  year = {2010},
  pages = {85--104},
  publisher = {{Elsevier}},
  doi = {10.1016/B978-0-12-381541-5.00005-5},
  abstract = {Today's knowledge workers interact with a variety of Web-based tasks in the course of their jobs. We have found that two of the challenges faced by these workers are automation of repetitive tasks, and support for complex or hard-to-remember tasks. This chapter presents CoScripter, a system that enables users to capture, share, and automate tasks on the Web. CoScripter's most notable features include ClearScript, a scripting language that is both human-readable and machine-understandable, and built-in support for sharing via a Web-based script repository. CoScripter has been used by tens of thousands of people on the Web. Our user studies show that CoScripter has helped people both automate repetitive Web tasks, and share how-to knowledge inside the enterprise.},
  file = {/Users/geoffreylitt/Zotero/storage/U84JQNIC/Cypher et al. - 2010 - Collaborative scripting for the Web.pdf},
  isbn = {978-0-12-381541-5},
  language = {en}
}

@book{disessa2000,
  title = {Changing {{Minds}}: {{Computers}}, {{Learning}}, and {{Literacy}}},
  shorttitle = {Changing {{Minds}}},
  author = {{diSessa}, Andrea A.},
  year = {2000},
  publisher = {{MIT Press}},
  address = {{Cambridge, MA, USA}}
}

@inproceedings{eagan2011,
  title = {Cracking the Cocoa Nut: User Interface Programming at Runtime},
  shorttitle = {Cracking the Cocoa Nut},
  booktitle = {Proceedings of the 24th Annual {{ACM}} Symposium on {{User}} Interface Software and Technology - {{UIST}} '11},
  author = {Eagan, James R. and {Beaudouin-Lafon}, Michel and Mackay, Wendy E.},
  year = {2011},
  pages = {225},
  publisher = {{ACM Press}},
  address = {{Santa Barbara, California, USA}},
  doi = {10.1145/2047196.2047226},
  abstract = {This article introduces runtime toolkit overloading, a novel approach to help third-party developers modify the interaction and behavior of existing software applications without access to their underlying source code. We describe the abstractions provided by this approach as well as the mechanisms for implementing them in existing environments. We describe Scotty, a prototype implementation for Mac OS X Cocoa that enables developers to modify existing applications at runtime, and we demonstrate a collection of interaction and functional transformations on existing off-the-shelf applications. We show how Scotty helps a developer make sense of unfamiliar software, even without access to its source code. We further discuss what features of future environments would facilitate this kind of runtime software development.},
  file = {/Users/geoffreylitt/Zotero/storage/EBX2GJRX/Eagan et al. - 2011 - Cracking the cocoa nut user interface programming.pdf},
  isbn = {978-1-4503-0716-1},
  language = {en}
}

@article{foster2007,
  title = {Combinators for Bidirectional Tree Transformations: {{A}} Linguistic Approach to the View-Update Problem},
  shorttitle = {Combinators for Bidirectional Tree Transformations},
  author = {Foster, J. Nathan and Greenwald, Michael B. and Moore, Jonathan T. and Pierce, Benjamin C. and Schmitt, Alan},
  year = {2007},
  month = may,
  volume = {29},
  pages = {17},
  issn = {0164-0925, 1558-4593},
  doi = {10.1145/1232420.1232424},
  file = {/Users/geoffreylitt/Zotero/storage/N8278PUU/Foster et al. - 2007 - Combinators for bidirectional tree transformations.pdf},
  journal = {ACM Transactions on Programming Languages and Systems},
  language = {en},
  number = {3}
}

@inproceedings{hogue2005,
  title = {Thresher: Automating the Unwrapping of Semantic Content from the {{World Wide Web}}},
  shorttitle = {Thresher},
  booktitle = {Proceedings of the 14th International Conference on {{World Wide Web}}  - {{WWW}} '05},
  author = {Hogue, Andrew and Karger, David},
  year = {2005},
  pages = {86},
  publisher = {{ACM Press}},
  address = {{Chiba, Japan}},
  doi = {10.1145/1060745.1060762},
  abstract = {We describe Thresher, a system that lets non-technical users teach their browsers how to extract semantic web content from HTML documents on the World Wide Web. Users specify examples of semantic content by highlighting them in a web browser and describing their meaning. We then use the tree edit distance between the DOM subtrees of these examples to create a general pattern, or wrapper, for the content, and allow the user to bind RDF classes and predicates to the nodes of these wrappers. By overlaying matches to these patterns on standard documents inside the Haystack semantic web browser, we enable a rich semantic interaction with existing web pages, ``unwrapping'' semantic data buried in the pages' HTML. By allowing end-users to create, modify, and utilize their own patterns, we hope to speed adoption and use of the Semantic Web and its applications.},
  file = {/Users/geoffreylitt/Zotero/storage/SGZ4PK28/Hogue and Karger - 2005 - Thresher automating the unwrapping of semantic co.pdf},
  isbn = {978-1-59593-046-0},
  language = {en}
}

@article{hutchins1985,
  title = {Direct {{Manipulation Interfaces}}},
  author = {Hutchins, Edwin L and Hollan, James D and Norman, Donald A},
  year = {1985},
  pages = {28},
  abstract = {Direct manipulation has been lauded as a good form of interface design, and some interfaces that have this property have been well received by users. In this article we seek a cognitive account of both the advantages and disadvantages of direct manipulation interfaces. We identify two underlying phenomena that give rise to the feeling of directness. O n e deals with the information processing distance between the user's intentions and the facilities provided by the machine. Reduction of this distance makes the interface feel direct by reducing the effort required of the user to accomplish goals. The second phenomenon concerns the relation between the input and output vocabularies of the interface language. In particular, direct manipulation requires that the system provide representations of objects that behave as if they are the objects themselves. This provides the feeling of directness of manipulation.},
  file = {/Users/geoffreylitt/Zotero/storage/NACHFDN3/Hutchins et al. - Direct Manipulation Interfaces.pdf},
  language = {en}
}

@article{huynh,
  title = {Piggy {{Bank}}: {{Experience}} the {{Semantic Web Inside Your Web Browser}}},
  author = {Huynh, David and Mazzocchi, Stefano and Karger, David},
  pages = {15},
  abstract = {The Semantic Web Initiative envisions a Web wherein information is offered free of presentation, allowing more effective exchange and mixing across web sites and across web pages. But without substantial Semantic Web content, few tools will be written to consume it; without many such tools, there is little appeal to publish Semantic Web content.},
  file = {/Users/geoffreylitt/Zotero/storage/KN75YT2E/Huynh et al. - Piggy Bank Experience the Semantic Web Inside You.pdf},
  language = {en}
}

@inproceedings{huynh2006,
  title = {Enabling Web Browsers to Augment Web Sites' Filtering and Sorting Functionalities},
  booktitle = {Proceedings of the 19th Annual {{ACM}} Symposium on {{User}} Interface Software and Technology - {{UIST}} '06},
  author = {Huynh, David F. and Miller, Robert C. and Karger, David R.},
  year = {2006},
  pages = {125},
  publisher = {{ACM Press}},
  address = {{Montreux, Switzerland}},
  doi = {10.1145/1166253.1166274},
  abstract = {Existing augmentations of web pages are mostly small cosmetic changes (e.g., removing ads) and minor addition of third-party content (e.g., product prices from competing sites). None leverages the structured data presented in web pages. This paper describes Sifter, a web browser extension that can augment a well-structured web site with advanced filtering and sorting functionality. These added features work inside the site's own pages, preserving the site's presentational style and the user's context. Sifter contains an algorithm that scrapes structured data out of well-structured web pages while usually requiring no user intervention. We tested Sifter on real web sites and real users and found that people could use Sifter to perform sophisticated queries and high-level analyses on sizable data collections on the Web. We propose that web sites can be similarly augmented with other sophisticated data-centric functionality, giving users new benefits over the existing Web.},
  file = {/Users/geoffreylitt/Zotero/storage/8WA9RXE3/Huynh et al. - 2006 - Enabling web browsers to augment web sites' filter.pdf},
  isbn = {978-1-59593-313-3},
  language = {en}
}

@article{kay1977,
  title = {Personal {{Dynamic Media}}},
  author = {Kay, A. and Goldberg, A.},
  year = {1977},
  month = mar,
  volume = {10},
  pages = {31--41},
  issn = {1558-0814},
  doi = {10.1109/C-M.1977.217672},
  abstract = {The Learning Research Group at Xerox Palo Alto Research Center is concerned with all aspects of the communication and manipulation of knowledge. We design, build, and use dynamic media which can be used by human beings of all ages. Several years ago, we crystallized our dreams into a design idea for a personal dynamic medium the size of a notebook (the Dynabook) which could be owned by everyone and could have the power to handle virtually all of its owner's information-related needs. Towards this goal we have designed and built a communications system: the Smalltalk language, implemented on small computers we refer to as "interim Dynabooks." We are exploring the use of this system as a programming and problem solving tool; as an interactive memory for the storage and manipulation of data; as a text editor; and as a medium for expression through drawing, painting, animating pictures, and composing and generating music. (Figure 1 is a view of this interim Dynabook.)},
  file = {/Users/geoffreylitt/Zotero/storage/Q3SGCHYI/Kay and Goldberg - 1977 - Personal Dynamic Media.pdf;/Users/geoffreylitt/Zotero/storage/8Q36BUGB/1646405.html},
  journal = {Computer},
  keywords = {Animation,Computational modeling,Crystallization,Embedded computing,Information retrieval,Manipulator dynamics,Problem-solving},
  number = {3}
}

@inproceedings{kleppmann2019,
  title = {Local-First Software: You Own Your Data, in Spite of the Cloud},
  shorttitle = {Local-First Software},
  booktitle = {Proceedings of the 2019 {{ACM SIGPLAN International Symposium}} on {{New Ideas}}, {{New Paradigms}}, and {{Reflections}} on {{Programming}} and {{Software}}  - {{Onward}}! 2019},
  author = {Kleppmann, Martin and Wiggins, Adam and {van Hardenberg}, Peter and McGranaghan, Mark},
  year = {2019},
  pages = {154--178},
  publisher = {{ACM Press}},
  address = {{Athens, Greece}},
  doi = {10.1145/3359591.3359737},
  abstract = {Cloud apps like Google Docs and Trello are popular because they enable real-time collaboration with colleagues, and they make it easy for us to access our work from all of our devices. However, by centralizing data storage on servers, cloud apps also take away ownership and agency from users. If a service shuts down, the software stops functioning, and data created with that software is lost.},
  file = {/Users/geoffreylitt/Zotero/storage/DQ4P84XK/Kleppmann et al. - 2019 - Local-first software you own your data, in spite .pdf},
  isbn = {978-1-4503-6995-4},
  language = {en}
}

@inproceedings{klokmose2015,
  title = {Webstrates: {{Shareable Dynamic Media}}},
  shorttitle = {Webstrates},
  booktitle = {Proceedings of the 28th {{Annual ACM Symposium}} on {{User Interface Software}} \& {{Technology}} - {{UIST}} '15},
  author = {Klokmose, Clemens N. and Eagan, James R. and Baader, Siemen and Mackay, Wendy and {Beaudouin-Lafon}, Michel},
  year = {2015},
  pages = {280--290},
  publisher = {{ACM Press}},
  address = {{Daegu, Kyungpook, Republic of Korea}},
  doi = {10.1145/2807442.2807446},
  abstract = {We revisit Alan Kay's early vision of dynamic media that blurs the distinction between documents and applications. We introduce shareable dynamic media that are malleable by users, who may appropriate them in idiosyncratic ways; shareable among users, who collaborate on multiple aspects of the media; and distributable across diverse devices and platforms. We present Webstrates, an environment for exploring shareable dynamic media. Webstrates augment web technology with real-time sharing. They turn web pages into substrates, i.e. software entities that act as applications or documents depending upon use. We illustrate Webstrates with two implemented case studies: users collaboratively author an article with functionally and visually different editors that they can personalize and extend at run-time; and they orchestrate its presentation and audience participation with multiple devices. We demonstrate the simplicity and generative power of Webstrates with three additional prototypes and evaluate it from a systems perspective.},
  file = {/Users/geoffreylitt/Zotero/storage/PZI6XAMQ/PZI6XAMQ.pdf},
  isbn = {978-1-4503-3779-3},
  language = {en}
}

@inproceedings{leshed2008,
  title = {{{CoScripter}}: {{Automating}} \& {{Sharing How}}-to {{Knowledge}} in the {{Enterprise}}},
  shorttitle = {{{CoScripter}}},
  booktitle = {Proceedings of the {{SIGCHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Leshed, Gilly and Haber, Eben M. and Matthews, Tara and Lau, Tessa},
  year = {2008},
  pages = {1719--1728},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1357054.1357323},
  abstract = {Modern enterprises are replete with numerous online processes. Many must be performed frequently and are tedious, while others are done less frequently yet are complex or hard to remember. We present interviews with knowledge workers that reveal a need for mechanisms to automate the execution of and to share knowledge about these processes. In response, we have developed the CoScripter system (formerly Koala [11]), a collaborative scripting environment for recording, automating, and sharing web-based processes. We have deployed CoScripter within a large corporation for more than 10 months. Through usage log analysis and interviews with users, we show that CoScripter has addressed many user automation and sharing needs, to the extent that more than 50 employees have voluntarily incorporated it into their work practice. We also present ways people have used CoScripter and general issues for tools that support automation and sharing of how-to knowledge.},
  file = {/Users/geoffreylitt/Zotero/storage/RHE55DIG/Leshed et al. - 2008 - CoScripter Automating & Sharing How-to Knowledge .pdf},
  isbn = {978-1-60558-011-1},
  keywords = {automation,knowledge sharing,procedural knowledge,programming-by-demonstration,scripting,user study,wiki},
  series = {{{CHI}} '08}
}

@inproceedings{litt2020,
  title = {Wildcard: {{Spreadsheet}}-{{Driven Customization}} of {{Web Applications}}},
  booktitle = {Companion {{Proceedings}} of the 4th {{In}}- Ternational {{Conference}} on the {{Art}}, {{Science}}, and {{Engineering}} of {{Programming}}},
  author = {Litt, Geoffrey and Jackson, Daniel},
  year = {2020},
  pages = {10},
  publisher = {{Association for Computing Machinery}},
  address = {{Porto, Portugal.}},
  doi = {10.1145/3397537.3397541},
  abstract = {Many Web applications do not meet the precise needs of their users. Browser extensions offer a way to customize web applications, but most people do not have the programming skills to implement their own extensions.},
  file = {/Users/geoffreylitt/Zotero/storage/SWZK2S4B/Litt and Jackson - 2020 - Wildcard Spreadsheet-Driven Customization of Web .pdf},
  language = {en}
}

@incollection{little2010,
  title = {Sloppy Programming},
  booktitle = {No {{Code Required}}},
  author = {Little, Greg and Miller, Robert C. and Chou, Victoria H. and Bernstein, Michael and Lau, Tessa and Cypher, Allen},
  year = {2010},
  pages = {289--307},
  publisher = {{Elsevier}},
  doi = {10.1016/B978-0-12-381541-5.00015-8},
  abstract = {Modern applications provide interfaces for scripting, but many users do not know how to write script commands. However, many users are familiar with the idea of entering keywords into a Web search engine. Hence, if a user is familiar with the vocabulary of an application domain, we anticipate that they could write a set of keywords expressing a command in that domain. For instance, in the Web browsing domain, a user might enter ``click search button''. We call loosely grammatical commands of this sort ``sloppy commands.'' We discuss several prototypes that implement sloppy programming, translating sloppy commands directly into executable code. We also discuss the algorithms used in these prototypes, expose their limitations, and propose directions for future work.},
  file = {/Users/geoffreylitt/Zotero/storage/GBFFTC6G/Little et al. - 2010 - Sloppy programming.pdf},
  isbn = {978-0-12-381541-5},
  language = {en}
}

@inproceedings{liu2009,
  title = {A {{Spreadsheet Algebra}} for a {{Direct Data Manipulation Query Interface}}},
  booktitle = {2009 {{IEEE}} 25th {{International Conference}} on {{Data Engineering}}},
  author = {Liu, Bin and Jagadish, H. V.},
  year = {2009},
  month = mar,
  pages = {417--428},
  issn = {2375-026X},
  doi = {10.1109/ICDE.2009.34},
  abstract = {A spreadsheet-like "direct manipulation" interface is more intuitive for many non-technical database users compared to traditional alternatives, such as visual query builders. The construction of such a direct manipulation interface may appear straightforward, but there are some significant challenges. First, individual direct manipulation operations cannot be too complex, so expressive power has to be achieved through composing (long) sequences of small operations. Second, all intermediate results are visible to the user, so grouping and ordering are material after every small step. Third, users often find the need to modify previously specified queries. Since manipulations are specified one step at a time, there is no actual queryexpression to modify. Suitable means must be provided to address this need. Fourth, the order in which manipulations are performed by the user should not affect the results obtained, to avoid user confusion. We address the aforementioned challenges by designing a new spreadsheet algebra that: i) operates on recursively grouped multi-sets, ii) contains a selectively designed set of operators capable of expressing at least all single-block SQL queries and can be intuitively implemented in a spreadsheet, iii) enables query modification by the notion of modifiable query state, and iv) requires no ordering in unary data manipulation operators since they are all designed to commute. We built a prototype implementation of the spreadsheet algebra and show, through user studies with non-technical subjects, that the resultant query interface is easier to use than a standard commercial visual query builder.},
  file = {/Users/geoffreylitt/Zotero/storage/M3AFJ2UA/Liu and Jagadish - 2009 - A Spreadsheet Algebra for a Direct Data Manipulati.pdf;/Users/geoffreylitt/Zotero/storage/576BWR2D/4812422.html},
  keywords = {Algebra,Data analysis,Data engineering,database usability,direct data manipulation query interface,Humans,Presses,Prototypes,query processing,Relational databases,single-block SQL queries,spreadsheet,spreadsheet algebra,spreadsheet programs,Spreadsheet programs,SQL,USA Councils,user interface,Visual databases,visual query builders}
}

@inproceedings{maclean1990,
  title = {User-Tailorable Systems: Pressing the Issues with Buttons},
  shorttitle = {User-Tailorable Systems},
  booktitle = {Proceedings of the {{SIGCHI}} Conference on {{Human}} Factors in Computing Systems {{Empowering}} People - {{CHI}} '90},
  author = {MacLean, Allan and Carter, Kathleen and L{\"o}vstrand, Lennart and Moran, Thomas},
  year = {1990},
  pages = {175--182},
  publisher = {{ACM Press}},
  address = {{Seattle, Washington, United States}},
  doi = {10.1145/97243.97271},
  abstract = {It is impossible to design systems which are appropriate for all users and ail situations. We believe that a useful technique is to have end users tailor their systems to match their personal work practices. This requires not only systems which can be tailored, but a culture within which users feel in control of the system and in which tailoring is the norm. In a two-pronged research project we have worked closely with a group of users to develop a system to support tailoring and to help the users evolve a ``tailoring culture''. This has resulted in a flexible system based around the use of distributed on-screen Buttons to support a range of tailoring techniques.},
  file = {/Users/geoffreylitt/Zotero/storage/PT5BEQ7D/MacLean et al. - 1990 - User-tailorable systems pressing the issues with .pdf},
  isbn = {978-0-201-50932-8},
  language = {en}
}

@inproceedings{mccutchen2016,
  title = {Object Spreadsheets: A New Computational Model for End-User Development of Data-Centric Web Applications},
  shorttitle = {Object Spreadsheets},
  booktitle = {Proceedings of the 2016 {{ACM International Symposium}} on {{New Ideas}}, {{New Paradigms}}, and {{Reflections}} on {{Programming}} and {{Software}} - {{Onward}}! 2016},
  author = {McCutchen, Matt and Itzhaky, Shachar and Jackson, Daniel},
  year = {2016},
  pages = {112--127},
  publisher = {{ACM Press}},
  address = {{Amsterdam, Netherlands}},
  doi = {10.1145/2986012.2986018},
  abstract = {Spreadsheets offer many advantages as the computational and data-storage engine for applications that are authored by end users. Paradoxically, however, their main failing in this regard is their computational model. Despite being used in almost all cases to represent data that is essentially relational (with some hierarchical structuring), the spreadsheet model treats the two-dimensional grid as largely unstructured, with formulas linking cells in an ad hoc way.},
  file = {/Users/geoffreylitt/Zotero/storage/8KXJ224J/McCutchen et al. - 2016 - Object spreadsheets a new computational model for.pdf},
  isbn = {978-1-4503-4076-2},
  language = {en}
}

@incollection{miller2010a,
  title = {Rewriting the {{Web}} with {{Chickenfoot}}},
  booktitle = {No {{Code Required}}},
  author = {Miller, Robert C. and Bolin, Michael and Chilton, Lydia B. and Little, Greg and Webber, Matthew and Yu, Chen-Hsiang},
  year = {2010},
  pages = {39--63},
  publisher = {{Elsevier}},
  doi = {10.1016/B978-0-12-381541-5.00003-1},
  abstract = {On the desktop, an application can expect to control its user interface down to the last pixel, but on the World Wide Web, a content provider has no control over how the client will view the page, once delivered to the browser. This creates an opportunity for end users who want to automate and customize their Web experiences, but the growing complexity of Web pages and standards prevents most users from realizing this opportunity. This chapter describes Chickenfoot, a programming system embedded in the Firefox Web browser, which enables end users to automate, customize, and integrate Web applications without examining their source code. One way Chickenfoot addresses this goal is a technique for identifying page components by keyword pattern matching. We motivate this technique by studying how users name Web page components, and present a heuristic keyword matching algorithm that identifies the desired component from the user's name. We describe a range of applications that have been created using Chickenfoot and reflect on its advantages and limitations.},
  file = {/Users/geoffreylitt/Zotero/storage/L74PCDWX/Miller et al. - 2010 - Rewriting the Web with Chickenfoot.pdf},
  isbn = {978-0-12-381541-5},
  language = {en}
}

@article{sarkar2018,
  title = {Calculation {{View}}: Multiple-Representation Editing in Spreadsheets},
  shorttitle = {Calculation {{View}}},
  author = {Sarkar, Advait and Gordon, Andy and Jones, Simon Peyton and Toronto, Neil},
  year = {2018},
  month = oct,
  abstract = {Spreadsheet errors are ubiquitous and costly, an unfortunate combination that is well-reported. A large class of these errors can be attributed to the inability to clearly see the underlying computational structure, as well as poor support for abstraction (encapsulation, re-use, etc). In this paper we propose a novel solution: a multiple-representation spreadsheet containing additional representations \ldots},
  file = {/Users/geoffreylitt/Zotero/storage/H9QZBRSC/Sarkar et al. - 2018 - Calculation View multiple-representation editing .pdf;/Users/geoffreylitt/Zotero/storage/7EV4V9XU/calculation-view-multiple-representation-editing-in-spreadsheets.html},
  language = {en-US}
}

@article{shneiderman1983,
  title = {Direct {{Manipulation}}: {{A Step Beyond Programming Languages}}},
  shorttitle = {Direct {{Manipulation}}},
  author = {Shneiderman, B.},
  year = {1983},
  month = aug,
  volume = {16},
  pages = {57--69},
  issn = {0018-9162},
  doi = {10.1109/MC.1983.1654471},
  abstract = {First Page of the Article},
  file = {/Users/geoffreylitt/Zotero/storage/ML6V6C9N/Shneiderman - 1983 - Direct Manipulation A Step Beyond Programming Lan.pdf},
  journal = {Computer},
  number = {8}
}

@misc{streak,
  title = {{{InboxSDK}}},
  author = {Streak},
  file = {/Users/geoffreylitt/Zotero/storage/TK2FCLM5/www.inboxsdk.com.html},
  howpublished = {https://www.inboxsdk.com/}
}

@misc{talwar2019,
  title = {Gmail.Js},
  author = {Talwar, Kartik},
  year = {2019},
  abstract = {Gmail JavaScript API},
  file = {/Users/geoffreylitt/Zotero/storage/EQIGCWJM/master.html},
  howpublished = {https://github.com/KartikTalwar/gmail.js},
  journal = {GitHub},
  language = {en}
}

@inproceedings{trigg1994,
  title = {From Implementation to Design: Tailoring and the Emergence of Systematization in {{CSCW}}},
  shorttitle = {From Implementation to Design},
  booktitle = {Proceedings of the 1994 {{ACM}} Conference on {{Computer}} Supported Cooperative Work},
  author = {Trigg, Randall H. and B{\o}dker, Susanne},
  year = {1994},
  month = oct,
  pages = {45--54},
  publisher = {{Association for Computing Machinery}},
  address = {{Chapel Hill, North Carolina, USA}},
  doi = {10.1145/192844.192869},
  abstract = {In this paper, we look at how people working in a governmental labor inspection agency tailor their shared PC environment. Starting with standard off-the-shelf software, the tailors adapt that software to the particular workplace in which they are embedded, at the same time that they modify and extend the practices of that workplace. Over time, their adaptations and the tailoring processes themselves become structured and systematized within the organization. This tendency toward systematization is in part a response to the requirement that the results of tailoring be sharable across groups of users. Our study focuses on several dimensions of the work of tailoring: construction, organizational change, learning, and politics. We draw two kinds of lessons for system development: how better to support the work of tailors, and how system developers can learn from and cooperate with tailors.},
  file = {/Users/geoffreylitt/Zotero/storage/YKXY2L95/Trigg and Bødker - 1994 - From implementation to design tailoring and the e.pdf},
  isbn = {978-0-89791-689-9},
  keywords = {customizable software,customization,development and use of shared standards,emergent use of standard technology,tailoring},
  series = {{{CSCW}} '94}
}

@inproceedings{wong2007,
  title = {Making Mashups with Marmite: Towards End-User Programming for the Web},
  shorttitle = {Making Mashups with Marmite},
  booktitle = {Proceedings of the {{SIGCHI Conference}} on {{Human Factors}} in {{Computing Systems}}  - {{CHI}} '07},
  author = {Wong, Jeffrey and Hong, Jason I.},
  year = {2007},
  pages = {1435--1444},
  publisher = {{ACM Press}},
  address = {{San Jose, California, USA}},
  doi = {10.1145/1240624.1240842},
  abstract = {There is a tremendous amount of web content available today, but it is not always in a form that supports end-users' needs. In many cases, all of the data and services needed to accomplish a goal already exist, but are not in a form amenable to an end-user. To address this problem, we have developed an end-user programming tool called Marmite, which lets end-users create so-called mashups that repurpose and combine existing web content and services. In this paper, we present the design, implementation, and evaluation of Marmite. An informal user study found that programmers and some spreadsheet users had little difficulty using the system.},
  file = {/Users/geoffreylitt/Zotero/storage/9QWLY8KD/Wong and Hong - 2007 - Making mashups with marmite towards end-user prog.pdf},
  isbn = {978-1-59593-593-9},
  language = {en}
}

@misc{zotero-700,
  title = {Cocoa {{Scripting}}},
  file = {/Users/geoffreylitt/Zotero/storage/IJQ3ZSSW/Scripting.html},
  howpublished = {https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/AppArchitecture/Concepts/Scripting.html}
}

@misc{zotero-733,
  title = {Forms/3: {{A}} First-Order Visual Language to Explore the Boundaries of the Spreadsheet Paradigm | {{Journal}} of {{Functional Programming}}},
  file = {/Users/geoffreylitt/Zotero/storage/SLSXALZJ/968486.html},
  howpublished = {https://dl-acm-org.libproxy.mit.edu/doi/10.5555/968486.968487}
}


