
@misc{2020a,
  title = {Airtable},
  shorttitle = {Airtable},
  year = {2020},
  abstract = {Airtable works like a spreadsheet but gives you the power of a database to organize anything. Sign up for free.},
  file = {/Users/geoffreylitt/Zotero/storage/8UKHXPNG/airtable.com.html},
  howpublished = {https://airtable.com},
  journal = {Airtable}
}

@article{ainsworth1999,
  title = {The Functions of Multiple Representations},
  author = {Ainsworth, Shaaron},
  year = {1999},
  month = sep,
  volume = {33},
  pages = {131--152},
  issn = {03601315},
  doi = {10.1016/S0360-1315(99)00029-9},
  abstract = {Multiple representations and multi-media can support learning in many dierent ways. In this paper, it is claimed that by identifying the functions that they can serve, many of the con\textasciimacron{}icting \textregistered{}ndings arising out of the existing evaluations of multi-representational learning environments can be explained. This will lead to more systematic design principles. To this end, this paper describes a functional taxonomy of MERs. This taxonomy is used to ask how translation across representations should be supported to maximise learning outcomes and what information should be gathered from empirical evaluation in order to determine the eectiveness of multi-representational learning environments. \# 2000 Elsevier Science Ltd. All rights reserved.},
  file = {/Users/geoffreylitt/Zotero/storage/HF2GC8JY/Ainsworth - 1999 - The functions of multiple representations.pdf},
  journal = {Computers \& Education},
  language = {en},
  number = {2-3}
}

@inproceedings{alrashed2020,
  title = {{{ScrAPIr}}: {{Making Web Data APIs Accessible}} to {{End Users}}},
  shorttitle = {{{ScrAPIr}}},
  booktitle = {Proceedings of the 2020 {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Alrashed, Tarfah and Almahmoud, Jumana and Zhang, Amy X. and Karger, David R.},
  year = {2020},
  month = apr,
  pages = {1--12},
  publisher = {{Association for Computing Machinery}},
  address = {{Honolulu, HI, USA}},
  doi = {10.1145/3313831.3376691},
  abstract = {Users have long struggled to extract and repurpose data from websites by laboriously copying or scraping content from web pages. An alternative is to write scripts that pull data through APIs. This provides a cleaner way to access data than scraping; however, APIs are effortful for programmers and nigh-impossible for non-programmers to use. In this work, we empower users to access APIs without programming. We evolve a schema for declaratively specifying how to interact with a data API. We then develop ScrAPIr: a standard query GUI that enables users to fetch data through any API for which a specification exists, and a second GUI that lets users author and share the specification for a given API. From a lab evaluation, we find that even non-programmers can access APIs using ScrAPIr, while programmers can access APIs 3.8 times faster on average using ScrAPIr than using programming.},
  file = {/Users/geoffreylitt/Zotero/storage/AXSUQGM7/Alrashed et al. - 2020 - ScrAPIr Making Web Data APIs Accessible to End Us.pdf},
  isbn = {978-1-4503-6708-0},
  keywords = {api description language,web apis,web scraping},
  series = {{{CHI}} '20}
}

@inproceedings{bakke2016,
  title = {Expressive {{Query Construction}} through {{Direct Manipulation}} of {{Nested Relational Results}}},
  booktitle = {Proceedings of the 2016 {{International Conference}} on {{Management}} of {{Data}} - {{SIGMOD}} '16},
  author = {Bakke, Eirik and Karger, David R.},
  year = {2016},
  pages = {1377--1392},
  publisher = {{ACM Press}},
  address = {{San Francisco, California, USA}},
  doi = {10.1145/2882903.2915210},
  abstract = {Despite extensive research on visual query systems, the standard way to interact with relational databases remains to be through SQL queries and tailored form interfaces. We consider three requirements to be essential to a successful alternative: (1) query specification through direct manipulation of results, (2) the ability to view and modify any part of the current query without departing from the direct manipulation interface, and (3) SQL-like expressiveness. This paper presents the first visual query system to meet all three requirements in a single design. By directly manipulating nested relational results, and using spreadsheet idioms such as formulas and filters, the user can express a relationally complete set of query operators plus calculation, aggregation, outer joins, sorting, and nesting, while always remaining able to track and modify the state of the complete query. Our prototype gives the user an experience of responsive, incremental query building while pushing all actual query processing to the database layer. We evaluate our system with formative and controlled user studies on 28 spreadsheet users; the controlled study shows our system significantly outperforming Microsoft Access on the System Usability Scale.},
  file = {/Users/geoffreylitt/Zotero/storage/UAXRC2LC/Bakke and Karger - 2016 - Expressive Query Construction through Direct Manip.pdf},
  isbn = {978-1-4503-3531-7},
  language = {en}
}

@inproceedings{bolin2005,
  title = {Automation and Customization of Rendered Web Pages},
  booktitle = {Proceedings of the 18th Annual {{ACM}} Symposium on {{User}} Interface Software and Technology  - {{UIST}} '05},
  author = {Bolin, Michael and Webber, Matthew and Rha, Philip and Wilson, Tom and Miller, Robert C.},
  year = {2005},
  pages = {163},
  publisher = {{ACM Press}},
  address = {{Seattle, WA, USA}},
  doi = {10.1145/1095034.1095062},
  abstract = {On the desktop, an application can expect to control its user interface down to the last pixel, but on the World Wide Web, a content provider has no control over how the client will view the page, once delivered to the browser. This creates an opportunity for end-users who want to automate and customize their web experiences, but the growing complexity of web pages and standards prevents most users from realizing this opportunity. We describe Chickenfoot, a programming system embedded in the Firefox web browser, which enables end-users to automate, customize, and integrate web applications without examining their source code. One way Chickenfoot addresses this goal is a novel technique for identifying page components by keyword pattern matching. We motivate this technique by studying how users name web page components, and present a heuristic keyword matching algorithm that identifies the desired component from the user's name.},
  file = {/Users/geoffreylitt/Zotero/storage/JS89G2G2/Bolin et al. - 2005 - Automation and customization of rendered web pages.pdf},
  isbn = {978-1-59593-271-6},
  keywords = {Wildcard},
  language = {en}
}

@incollection{chilton2010,
  title = {Why We Customize the {{Web}}},
  booktitle = {No {{Code Required}}},
  author = {Chilton, Lydia B. and Miller, Robert C. and Little, Greg and Yu, Chen-Hsiang},
  year = {2010},
  pages = {23--35},
  publisher = {{Elsevier}},
  doi = {10.1016/B978-0-12-381541-5.00002-X},
  abstract = {The Web is increasingly an application platform comparable to the desktop, but its openness enables more customizations than were possible on the desktop. This chapter examines the kinds of customization seen on the Web, focusing on the highly extensible Mozilla Firefox Web browser, and compares and contrasts the motivations for Web customization with desktop customization.},
  file = {/Users/geoffreylitt/Zotero/storage/CPDBUMWR/Chilton et al. - 2010 - Why we customize the Web.pdf},
  isbn = {978-0-12-381541-5},
  language = {en}
}

@inproceedings{cook2007,
  title = {{{AppleScript}}},
  booktitle = {Proceedings of the Third {{ACM SIGPLAN}} Conference on {{History}} of Programming Languages  - {{HOPL III}}},
  author = {Cook, William R.},
  year = {2007},
  pages = {1-1-1-21},
  publisher = {{ACM Press}},
  address = {{San Diego, California}},
  doi = {10.1145/1238844.1238845},
  file = {/Users/geoffreylitt/Zotero/storage/4ZFGV2YC/4ZFGV2YC.pdf},
  language = {en}
}

@incollection{cypher2010,
  title = {End User Programming on the {{Web}}},
  booktitle = {No {{Code Required}}},
  author = {Cypher, Allen},
  year = {2010},
  pages = {3--22},
  publisher = {{Elsevier}},
  doi = {10.1016/B978-0-12-381541-5.00001-8},
  abstract = {This introduction explains who end users are and why they want to program. In the past 25 years, there have been two main approaches to enable end users to create their own programs: scripting languages and programming by demonstration. After outlining the challenges that confront these approaches, we shall see how the Web has removed some of the most significant barriers, opening the way for the recent progress that is detailed in this book.},
  file = {/Users/geoffreylitt/Zotero/storage/DS4X22YE/Cypher - 2010 - End user programming on the Web.pdf},
  isbn = {978-0-12-381541-5},
  language = {en}
}

@incollection{cypher2010a,
  title = {Collaborative Scripting for the {{Web}}},
  booktitle = {No {{Code Required}}},
  author = {Cypher, Allen and Drews, Clemens and Haber, Eben and Kandogan, Eser and Lin, James and Lau, Tessa and Leshed, Gilly and Matthews, Tara and Wilcox, Eric},
  year = {2010},
  pages = {85--104},
  publisher = {{Elsevier}},
  doi = {10.1016/B978-0-12-381541-5.00005-5},
  abstract = {Today's knowledge workers interact with a variety of Web-based tasks in the course of their jobs. We have found that two of the challenges faced by these workers are automation of repetitive tasks, and support for complex or hard-to-remember tasks. This chapter presents CoScripter, a system that enables users to capture, share, and automate tasks on the Web. CoScripter's most notable features include ClearScript, a scripting language that is both human-readable and machine-understandable, and built-in support for sharing via a Web-based script repository. CoScripter has been used by tens of thousands of people on the Web. Our user studies show that CoScripter has helped people both automate repetitive Web tasks, and share how-to knowledge inside the enterprise.},
  file = {/Users/geoffreylitt/Zotero/storage/U84JQNIC/Cypher et al. - 2010 - Collaborative scripting for the Web.pdf},
  isbn = {978-0-12-381541-5},
  language = {en}
}

@inproceedings{eagan2011,
  title = {Cracking the Cocoa Nut: User Interface Programming at Runtime},
  shorttitle = {Cracking the Cocoa Nut},
  booktitle = {Proceedings of the 24th Annual {{ACM}} Symposium on {{User}} Interface Software and Technology - {{UIST}} '11},
  author = {Eagan, James R. and {Beaudouin-Lafon}, Michel and Mackay, Wendy E.},
  year = {2011},
  pages = {225},
  publisher = {{ACM Press}},
  address = {{Santa Barbara, California, USA}},
  doi = {10.1145/2047196.2047226},
  abstract = {This article introduces runtime toolkit overloading, a novel approach to help third-party developers modify the interaction and behavior of existing software applications without access to their underlying source code. We describe the abstractions provided by this approach as well as the mechanisms for implementing them in existing environments. We describe Scotty, a prototype implementation for Mac OS X Cocoa that enables developers to modify existing applications at runtime, and we demonstrate a collection of interaction and functional transformations on existing off-the-shelf applications. We show how Scotty helps a developer make sense of unfamiliar software, even without access to its source code. We further discuss what features of future environments would facilitate this kind of runtime software development.},
  file = {/Users/geoffreylitt/Zotero/storage/EBX2GJRX/Eagan et al. - 2011 - Cracking the cocoa nut user interface programming.pdf},
  isbn = {978-1-4503-0716-1},
  language = {en}
}

@article{kay1977,
  title = {Personal {{Dynamic Media}}},
  author = {Kay, A. and Goldberg, A.},
  year = {1977},
  month = mar,
  volume = {10},
  pages = {31--41},
  issn = {1558-0814},
  doi = {10.1109/C-M.1977.217672},
  abstract = {The Learning Research Group at Xerox Palo Alto Research Center is concerned with all aspects of the communication and manipulation of knowledge. We design, build, and use dynamic media which can be used by human beings of all ages. Several years ago, we crystallized our dreams into a design idea for a personal dynamic medium the size of a notebook (the Dynabook) which could be owned by everyone and could have the power to handle virtually all of its owner's information-related needs. Towards this goal we have designed and built a communications system: the Smalltalk language, implemented on small computers we refer to as "interim Dynabooks." We are exploring the use of this system as a programming and problem solving tool; as an interactive memory for the storage and manipulation of data; as a text editor; and as a medium for expression through drawing, painting, animating pictures, and composing and generating music. (Figure 1 is a view of this interim Dynabook.)},
  file = {/Users/geoffreylitt/Zotero/storage/Q3SGCHYI/Kay and Goldberg - 1977 - Personal Dynamic Media.pdf;/Users/geoffreylitt/Zotero/storage/8Q36BUGB/1646405.html},
  journal = {Computer},
  keywords = {Animation,Computational modeling,Crystallization,Embedded computing,Information retrieval,Manipulator dynamics,Problem-solving},
  number = {3}
}

@inproceedings{litt2020,
  title = {Wildcard: {{Spreadsheet}}-{{Driven Customization}} of {{Web Applications}}},
  booktitle = {Companion {{Proceedings}} of the 4th {{In}}- Ternational {{Conference}} on the {{Art}}, {{Science}}, and {{Engineering}} of {{Programming}}},
  author = {Litt, Geoffrey and Jackson, Daniel},
  year = {2020},
  pages = {10},
  publisher = {{Association for Computing Machinery}},
  address = {{Porto, Portugal.}},
  doi = {10.1145/3397537.3397541},
  abstract = {Many Web applications do not meet the precise needs of their users. Browser extensions offer a way to customize web applications, but most people do not have the programming skills to implement their own extensions.},
  file = {/Users/geoffreylitt/Zotero/storage/SWZK2S4B/Litt and Jackson - 2020 - Wildcard Spreadsheet-Driven Customization of Web .pdf},
  language = {en}
}

@inproceedings{liu2009,
  title = {A {{Spreadsheet Algebra}} for a {{Direct Data Manipulation Query Interface}}},
  booktitle = {2009 {{IEEE}} 25th {{International Conference}} on {{Data Engineering}}},
  author = {Liu, Bin and Jagadish, H. V.},
  year = {2009},
  month = mar,
  pages = {417--428},
  issn = {2375-026X},
  doi = {10.1109/ICDE.2009.34},
  abstract = {A spreadsheet-like "direct manipulation" interface is more intuitive for many non-technical database users compared to traditional alternatives, such as visual query builders. The construction of such a direct manipulation interface may appear straightforward, but there are some significant challenges. First, individual direct manipulation operations cannot be too complex, so expressive power has to be achieved through composing (long) sequences of small operations. Second, all intermediate results are visible to the user, so grouping and ordering are material after every small step. Third, users often find the need to modify previously specified queries. Since manipulations are specified one step at a time, there is no actual queryexpression to modify. Suitable means must be provided to address this need. Fourth, the order in which manipulations are performed by the user should not affect the results obtained, to avoid user confusion. We address the aforementioned challenges by designing a new spreadsheet algebra that: i) operates on recursively grouped multi-sets, ii) contains a selectively designed set of operators capable of expressing at least all single-block SQL queries and can be intuitively implemented in a spreadsheet, iii) enables query modification by the notion of modifiable query state, and iv) requires no ordering in unary data manipulation operators since they are all designed to commute. We built a prototype implementation of the spreadsheet algebra and show, through user studies with non-technical subjects, that the resultant query interface is easier to use than a standard commercial visual query builder.},
  file = {/Users/geoffreylitt/Zotero/storage/M3AFJ2UA/Liu and Jagadish - 2009 - A Spreadsheet Algebra for a Direct Data Manipulati.pdf;/Users/geoffreylitt/Zotero/storage/576BWR2D/4812422.html},
  keywords = {Algebra,Data analysis,Data engineering,database usability,direct data manipulation query interface,Humans,Presses,Prototypes,query processing,Relational databases,single-block SQL queries,spreadsheet,spreadsheet algebra,spreadsheet programs,Spreadsheet programs,SQL,USA Councils,user interface,Visual databases,visual query builders}
}

@inproceedings{maclean1990,
  title = {User-Tailorable Systems: Pressing the Issues with Buttons},
  shorttitle = {User-Tailorable Systems},
  booktitle = {Proceedings of the {{SIGCHI}} Conference on {{Human}} Factors in Computing Systems {{Empowering}} People - {{CHI}} '90},
  author = {MacLean, Allan and Carter, Kathleen and L{\"o}vstrand, Lennart and Moran, Thomas},
  year = {1990},
  pages = {175--182},
  publisher = {{ACM Press}},
  address = {{Seattle, Washington, United States}},
  doi = {10.1145/97243.97271},
  abstract = {It is impossible to design systems which are appropriate for all users and ail situations. We believe that a useful technique is to have end users tailor their systems to match their personal work practices. This requires not only systems which can be tailored, but a culture within which users feel in control of the system and in which tailoring is the norm. In a two-pronged research project we have worked closely with a group of users to develop a system to support tailoring and to help the users evolve a ``tailoring culture''. This has resulted in a flexible system based around the use of distributed on-screen Buttons to support a range of tailoring techniques.},
  file = {/Users/geoffreylitt/Zotero/storage/PT5BEQ7D/MacLean et al. - 1990 - User-tailorable systems pressing the issues with .pdf},
  isbn = {978-0-201-50932-8},
  language = {en}
}

@incollection{miller2010a,
  title = {Rewriting the {{Web}} with {{Chickenfoot}}},
  booktitle = {No {{Code Required}}},
  author = {Miller, Robert C. and Bolin, Michael and Chilton, Lydia B. and Little, Greg and Webber, Matthew and Yu, Chen-Hsiang},
  year = {2010},
  pages = {39--63},
  publisher = {{Elsevier}},
  doi = {10.1016/B978-0-12-381541-5.00003-1},
  abstract = {On the desktop, an application can expect to control its user interface down to the last pixel, but on the World Wide Web, a content provider has no control over how the client will view the page, once delivered to the browser. This creates an opportunity for end users who want to automate and customize their Web experiences, but the growing complexity of Web pages and standards prevents most users from realizing this opportunity. This chapter describes Chickenfoot, a programming system embedded in the Firefox Web browser, which enables end users to automate, customize, and integrate Web applications without examining their source code. One way Chickenfoot addresses this goal is a technique for identifying page components by keyword pattern matching. We motivate this technique by studying how users name Web page components, and present a heuristic keyword matching algorithm that identifies the desired component from the user's name. We describe a range of applications that have been created using Chickenfoot and reflect on its advantages and limitations.},
  file = {/Users/geoffreylitt/Zotero/storage/L74PCDWX/Miller et al. - 2010 - Rewriting the Web with Chickenfoot.pdf},
  isbn = {978-0-12-381541-5},
  language = {en}
}

@article{sarkar2018,
  title = {Calculation {{View}}: Multiple-Representation Editing in Spreadsheets},
  shorttitle = {Calculation {{View}}},
  author = {Sarkar, Advait and Gordon, Andy and Jones, Simon Peyton and Toronto, Neil},
  year = {2018},
  month = oct,
  abstract = {Spreadsheet errors are ubiquitous and costly, an unfortunate combination that is well-reported. A large class of these errors can be attributed to the inability to clearly see the underlying computational structure, as well as poor support for abstraction (encapsulation, re-use, etc). In this paper we propose a novel solution: a multiple-representation spreadsheet containing additional representations \ldots{}},
  file = {/Users/geoffreylitt/Zotero/storage/H9QZBRSC/Sarkar et al. - 2018 - Calculation View multiple-representation editing .pdf;/Users/geoffreylitt/Zotero/storage/7EV4V9XU/calculation-view-multiple-representation-editing-in-spreadsheets.html},
  language = {en-US}
}

@article{shneiderman1983,
  title = {Direct {{Manipulation}}: {{A Step Beyond Programming Languages}}},
  shorttitle = {Direct {{Manipulation}}},
  author = {Shneiderman, B.},
  year = {1983},
  month = aug,
  volume = {16},
  pages = {57--69},
  issn = {0018-9162},
  doi = {10.1109/MC.1983.1654471},
  abstract = {First Page of the Article},
  file = {/Users/geoffreylitt/Zotero/storage/ML6V6C9N/Shneiderman - 1983 - Direct Manipulation A Step Beyond Programming Lan.pdf},
  journal = {Computer},
  number = {8}
}

@inproceedings{trigg1994,
  title = {From Implementation to Design: Tailoring and the Emergence of Systematization in {{CSCW}}},
  shorttitle = {From Implementation to Design},
  booktitle = {Proceedings of the 1994 {{ACM}} Conference on {{Computer}} Supported Cooperative Work},
  author = {Trigg, Randall H. and B{\o}dker, Susanne},
  year = {1994},
  month = oct,
  pages = {45--54},
  publisher = {{Association for Computing Machinery}},
  address = {{Chapel Hill, North Carolina, USA}},
  doi = {10.1145/192844.192869},
  abstract = {In this paper, we look at how people working in a governmental labor inspection agency tailor their shared PC environment. Starting with standard off-the-shelf software, the tailors adapt that software to the particular workplace in which they are embedded, at the same time that they modify and extend the practices of that workplace. Over time, their adaptations and the tailoring processes themselves become structured and systematized within the organization. This tendency toward systematization is in part a response to the requirement that the results of tailoring be sharable across groups of users. Our study focuses on several dimensions of the work of tailoring: construction, organizational change, learning, and politics. We draw two kinds of lessons for system development: how better to support the work of tailors, and how system developers can learn from and cooperate with tailors.},
  file = {/Users/geoffreylitt/Zotero/storage/YKXY2L95/Trigg and Bødker - 1994 - From implementation to design tailoring and the e.pdf},
  isbn = {978-0-89791-689-9},
  keywords = {customizable software,customization,development and use of shared standards,emergent use of standard technology,tailoring},
  series = {{{CSCW}} '94}
}

@misc{zotero-700,
  title = {Cocoa {{Scripting}}},
  file = {/Users/geoffreylitt/Zotero/storage/IJQ3ZSSW/Scripting.html},
  howpublished = {https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/AppArchitecture/Concepts/Scripting.html}
}


